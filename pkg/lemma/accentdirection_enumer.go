// Code generated by "enumer -type=AccentDirection -trimprefix=AccentDirection -transform=upper -text -gqlgen"; DO NOT EDIT.

package lemma

import (
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _AccentDirectionName = "UPRIGHTDOWNLEFT"

var _AccentDirectionIndex = [...]uint8{0, 2, 7, 11, 15}

const _AccentDirectionLowerName = "uprightdownleft"

func (i AccentDirection) String() string {
	if i < 0 || i >= AccentDirection(len(_AccentDirectionIndex)-1) {
		return fmt.Sprintf("AccentDirection(%d)", i)
	}
	return _AccentDirectionName[_AccentDirectionIndex[i]:_AccentDirectionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccentDirectionNoOp() {
	var x [1]struct{}
	_ = x[AccentDirectionUp-(0)]
	_ = x[AccentDirectionRight-(1)]
	_ = x[AccentDirectionDown-(2)]
	_ = x[AccentDirectionLeft-(3)]
}

var _AccentDirectionValues = []AccentDirection{AccentDirectionUp, AccentDirectionRight, AccentDirectionDown, AccentDirectionLeft}

var _AccentDirectionNameToValueMap = map[string]AccentDirection{
	_AccentDirectionName[0:2]:        AccentDirectionUp,
	_AccentDirectionLowerName[0:2]:   AccentDirectionUp,
	_AccentDirectionName[2:7]:        AccentDirectionRight,
	_AccentDirectionLowerName[2:7]:   AccentDirectionRight,
	_AccentDirectionName[7:11]:       AccentDirectionDown,
	_AccentDirectionLowerName[7:11]:  AccentDirectionDown,
	_AccentDirectionName[11:15]:      AccentDirectionLeft,
	_AccentDirectionLowerName[11:15]: AccentDirectionLeft,
}

var _AccentDirectionNames = []string{
	_AccentDirectionName[0:2],
	_AccentDirectionName[2:7],
	_AccentDirectionName[7:11],
	_AccentDirectionName[11:15],
}

// AccentDirectionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccentDirectionString(s string) (AccentDirection, error) {
	if val, ok := _AccentDirectionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccentDirectionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccentDirection values", s)
}

// AccentDirectionValues returns all values of the enum
func AccentDirectionValues() []AccentDirection {
	return _AccentDirectionValues
}

// AccentDirectionStrings returns a slice of all String values of the enum
func AccentDirectionStrings() []string {
	strs := make([]string, len(_AccentDirectionNames))
	copy(strs, _AccentDirectionNames)
	return strs
}

// IsAAccentDirection returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccentDirection) IsAAccentDirection() bool {
	for _, v := range _AccentDirectionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for AccentDirection
func (i AccentDirection) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AccentDirection
func (i *AccentDirection) UnmarshalText(text []byte) error {
	var err error
	*i, err = AccentDirectionString(string(text))
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for AccentDirection
func (i AccentDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for AccentDirection
func (i *AccentDirection) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("AccentDirection should be a string, got %T", value)
	}

	var err error
	*i, err = AccentDirectionString(str)
	return err
}
