type AnkiConnectionError implements Error {
  message: String!
}

type AnkiPermissionError implements Error {
  message: String!
  version: Int!
}

type AnkiUnauthorizedError implements Error {
  message: String!
  version: Int!
}

union AnkiError =  AnkiConnectionError | AnkiPermissionError | AnkiUnauthorizedError 

extend type Query {
  # Anki represents data available in Anki by AnkiConnect
  Anki: Anki!
}


type Anki {
  decks: AnkiDecksResult! @goField(forceResolver: true)
  notes: AnkiNotesResult! @goField(forceResolver: true)
  noteFields(name: String!): AnkiNoteFieldsResult! @goField(forceResolver: true)
}

type AnkiDecksResult {
  decks: [String!]
  error: AnkiError
}

type AnkiNotesResult {
  notes: [String!]
  error: AnkiError
}

type AnkiNoteFieldsResult {
  noteFields: [String!]
  error: AnkiError
}

extend type Query {
  # AnkiConfigState represents health state of integration with Anki
  AnkiConfigState: AnkiConfigStateResult!
}

type AnkiConfigStateResult {
  ankiConfigState: AnkiConfigState
  error: AnkiError
}

type AnkiConfigState {
  version: Int!
  deckExists: Boolean!
  noteTypeExists: Boolean!
  noteHasAllFields: Boolean!
}

extend type Query {
  AnkiConfig: AnkiConfig!
}

type AnkiConfig {
  addr: String!
  apiKey: String!
  deck: String!
  noteType: String!
  mapping: [AnkiMappingElement!]!
}

type AnkiMappingElement {
  key: String!
  value: String!
}

extend type Query {
  RenderFields(fields: [String!], template: String): RenderedFields!
}

type RenderedFields {
  template: String!
  templateError: String
  fields: [RenderedField!]!
}

type RenderedField {
  field: String!
  result: String!
  error: String
}


extend type Mutation {
  setAnkiConfigConnection(input: SetAnkiConfigConnectionInput!): SetAnkiConfigConnectionResult!
}

input SetAnkiConfigConnectionInput {
  addr: String!
  apiKey: String!
}

type SetAnkiConfigConnectionResult {
  error: ValidationError
}

extend type Mutation {
  setAnkiConfigDeck(input: SetAnkiConfigDeckInput!): SetAnkiConfigDeckResult!
}

input SetAnkiConfigDeckInput {
  name: String!
}

type SetAnkiConfigDeckResult {
  error: ValidationError
}

extend type Mutation {
  setAnkiConfigNote(input: SetAnkiConfigNote!): SetAnkiConfigNoteResult!
}

input SetAnkiConfigNote{
  name: String!
}

type SetAnkiConfigNoteResult {
  error: ValidationError
}

extend type Mutation {
  setAnkiConfigMapping(input: SetAnkiConfigMappingInput!): SetAnkiConfigMappingResult!
}

input SetAnkiConfigMappingInput {
  mapping: [AnkiConfigMappingElementInput!]!
}

input AnkiConfigMappingElementInput {
  key: String!
  value: String!
}

type AnkiConfigMappingError implements Error {
  fieldErrors: [AnkiConfigMappingElementError!]
  valueErrors: [AnkiConfigMappingElementError!]
  message: String!
}

type AnkiConfigMappingElementError {
  key: String!
  message: String!
}

type SetAnkiConfigMappingResult {
  error: AnkiConfigMappingError
}

extend type Mutation {
  createAnkiDeck(input: CreateAnkiDeckInput): CreateAnkiDeckResult!
}

input CreateAnkiDeckInput {
  name: String!
}

type CreateAnkiDeckAlreadyExists implements Error {
  message: String!
}

union CreateAnkiDeckError = CreateAnkiDeckAlreadyExists | ValidationError

type CreateAnkiDeckResult {
  ankiError: AnkiError
  error: CreateAnkiDeckError
}

extend type Mutation {
  createDefaultAnkiNote(input: CreateDefaultAnkiNoteInput): CreateDefaultAnkiNoteResult!
}

input CreateDefaultAnkiNoteInput {
  name: String!
}

type CreateDefaultAnkiNoteAlreadyExists implements Error {
  message: String!
}

union CreateDefaultAnkiNoteError = CreateDefaultAnkiNoteAlreadyExists | ValidationError

type CreateDefaultAnkiNoteResult {
  ankiError: AnkiError
  error: CreateDefaultAnkiNoteError
}
