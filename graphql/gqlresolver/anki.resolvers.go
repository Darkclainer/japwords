package gqlresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Darkclainer/japwords/graphql/gqlgenerated"
	"github.com/Darkclainer/japwords/graphql/gqlmodel"
)

// SetAnkiConnection is the resolver for the setAnkiConnection field.
func (r *mutationResolver) SetAnkiConnection(ctx context.Context, input gqlmodel.AnkiConnectionInput) (gqlmodel.AnkiConnectionPayload, error) {
	panic(fmt.Errorf("not implemented: SetAnkiConnection - setAnkiConnection"))
}

// SetAnkiDeck is the resolver for the setAnkiDeck field.
func (r *mutationResolver) SetAnkiDeck(ctx context.Context, input gqlmodel.AnkiDeckInput) (gqlmodel.AnkiDeckPayload, error) {
	panic(fmt.Errorf("not implemented: SetAnkiDeck - setAnkiDeck"))
}

// SetAnkiNoteType is the resolver for the setAnkiNoteType field.
func (r *mutationResolver) SetAnkiNoteType(ctx context.Context, input gqlmodel.AnkiNoteTypeInput) (gqlmodel.AnkiNoteTypePayload, error) {
	panic(fmt.Errorf("not implemented: SetAnkiNoteType - setAnkiNoteType"))
}

// SetAnkiMapping is the resolver for the setAnkiMapping field.
func (r *mutationResolver) SetAnkiMapping(ctx context.Context, input gqlmodel.AnkiMappingInput) (gqlmodel.AnkiMappingPayload, error) {
	panic(fmt.Errorf("not implemented: SetAnkiMapping - setAnkiMapping"))
}

// AnkiState is the resolver for the AnkiState field.
func (r *queryResolver) AnkiState(ctx context.Context) (*gqlmodel.AnkiState, error) {
	panic(fmt.Errorf("not implemented: AnkiState - AnkiState"))
}

// AnkiConfig is the resolver for the AnkiConfig field.
func (r *queryResolver) AnkiConfig(ctx context.Context) (*gqlmodel.AnkiConfig, error) {
	panic(fmt.Errorf("not implemented: AnkiConfig - AnkiConfig"))
}

// Mutation returns gqlgenerated.MutationResolver implementation.
func (r *Resolver) Mutation() gqlgenerated.MutationResolver { return &mutationResolver{r} }

// Query returns gqlgenerated.QueryResolver implementation.
func (r *Resolver) Query() gqlgenerated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
